<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="MAIN" Id="{2bbb03aa-d457-41dc-adf0-3baf372f675a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR

	(* Alarm control *)	
	// Alarm calculation function block
	init : BOOL;
	i : UINT;
	
	alarm_instance : REFERENCE TO FB_Alarm;

	(*User variables*)
	// User alarm event
	error_condition					: BOOL;
	warning_condition				: BOOL;
	info_condition					: BOOL;

	error_argument				: INT := 0;
	error_code_random			: DRAND; 

	// input FROM HMI
	is_error					: BOOL;
	is_warning					: BOOL;
	is_info						: BOOL;
	confirm_button_input		: BOOL;
	reset_button_input			: BOOL;

	// output to HMI
	status_unconfirm				: BOOL;
	unconfirmed_count				: UDINT;
	status_active					: BOOL;
	active_count					: UDINT;
	status_resetable				: BOOL;
	blink_timer				: TON := (PT := T#0.5S);
	
	(* For Visualization *)
    bReadEvents          : BOOL;
	
	(*Listener*)
	fb_observer : FB_EventObserver;
	event_table_view : FB_Tc3EventVisualizationView;
	fbGetTimeZoneInformation	: FB_GetTimeZoneInformation := (bExecute := TRUE);
	
	tmp_string : T_MaxString;
	lang_select_options : UDINT;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
	FB_Observer内の FB_Alarm インスタンス配列に対して、GVL.AlarmDatabseで定義したイベントクラスの情報で紐付ける。
*)
IF NOT init THEN
	FOR i := 1 TO AlarmEventParam.ALARM_MAX_COUNT DO
		fb_observer.event_table.init_instance(
			eventClass := TC_EVENT_CLASSES.UserEventClass,
			nEventId := GVL.AlarmDatabase[i].nEventId,
			eSeverity := GVL.AlarmDatabase[i].eSeverity,
			bWithConfirmation := GVL.AlarmDatabase[i].bWithConfirmation,
			bWithResetOperation := GVL.AlarmDatabase[i].bWithResetOperation
		);
	END_FOR
	fb_observer.event_table.viewer := event_table_view;
	init := TRUE;
END_IF


// アラーム1　（Alarmレベル） 発報制御
alarm_instance REF= fb_observer.event_table.get_alarm(1);			// 1番目のエラー配列に作成した FB_Alarm インスタンス参照を取り出す
IF __ISVALIDREF(alarm_instance) THEN		
	IF is_error THEN												// is_errorが エラー状態 bit
		error_code_random(Seed := 1);
		error_argument := TO_INT(error_code_random.Num * 32767.0);	// 疑似的に乱数によりエラーコードを生成
		alarm_instance.ipArguments.Clear();							// Event Class に登録したEventのDisplay text の {0} {1} に展開した文字をクリアにする。
		tmp_string := 'Error Code';									// F_STRING() の引数は VAR_IN_OUT なのでリテラルは使えない。一旦仮変数にセットする。
		alarm_instance.add_arguments(F_STRING(tmp_string));			// Event Class に登録したEventのDisplay text の {0} 部分に埋め込まれる値。 T_Arg型でセット。
		alarm_instance.add_arguments(F_Int(error_argument));		// Event Class に登録したEventのDisplay text の {1} 部分に埋め込まれる値。 T_Arg型でセット。
	END_IF
	alarm_instance.set_activate := is_error;						// エラー状態の通知。エラーテキストに　{0} や {1} などの付加的な情報が無ければこの 1 行だけで良い。
END_IF

// アラーム2　（Warningレベル） 発報制御
alarm_instance REF= fb_observer.event_table.get_alarm(2);
IF __ISVALIDREF(alarm_instance) THEN	
	IF is_warning THEN
		error_code_random(Seed := 1);
		error_argument := TO_INT(error_code_random.Num * 32767.0);
		alarm_instance.ipArguments.Clear();
		tmp_string := 'Warning Code';	
		alarm_instance.add_arguments(F_STRING(tmp_string));
		alarm_instance.add_arguments(F_Int(error_argument));
	END_IF
	alarm_instance.set_activate := is_warning;
END_IF


// アラーム3　（Informationレベル） 発報制御
alarm_instance REF= fb_observer.event_table.get_alarm(3);
IF __ISVALIDREF(alarm_instance) THEN
	IF is_info THEN
		error_code_random(Seed := 1);
		error_argument := TO_INT(error_code_random.Num * 32767.0);
		alarm_instance.ipArguments.Clear();
		tmp_string := 'Status';
		alarm_instance.add_arguments(F_STRING(tmp_string));
		alarm_instance.add_arguments(F_Int(error_argument));
	END_IF
	alarm_instance.set_activate := is_info;
END_IF

//　アラームリセットボタン受付
IF reset_button_input THEN
	fb_observer.event_table.try_clear_all_alarm();
END_IF

// アラーム確認ボタン受付
IF confirm_button_input THEN
	fb_observer.event_table.confirm_all_alarm();
END_IF


// IPCのロケール設定の読み出しと、Visualization向けイベントテーブル表示FBへのタイムゾーン情報設定
IF fbGetTimeZoneInformation.bBusy THEN
	fbGetTimeZoneInformation.bExecute := FALSE;		
END_IF
fbGetTimeZoneInformation();
event_table_view.tzinfo := fbGetTimeZoneInformation.tzInfo;

// オブザーバ（監視）オブジェクトの実行
CASE lang_select_options OF
	0: fb_observer.nLangId := 1033;
	1: fb_observer.nLangId := 1041;
END_CASE
fb_observer(event_class := TC_EVENT_CLASSES.UserEventClass);

// 表示用の変数制御　（アクティブアラーム数、未確認アラーム数、ボタン点滅制御、リセット可能状態）
active_count := fb_observer.event_table.active_event_count;
status_active := active_count > 0;
unconfirmed_count := fb_observer.event_table.unconfirmed_event_count;

status_resetable := fb_observer.event_table.set_event_count = 0 AND status_active;

IF unconfirmed_count > 0 THEN
	blink_timer(IN := NOT blink_timer.Q);
	IF blink_timer.Q THEN
		status_unconfirm := NOT status_unconfirm;
	END_IF
ELSE
	status_unconfirm := status_active;
END_IF]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1195" Count="9" />
      <LineId Id="1331" Count="0" />
      <LineId Id="1205" Count="19" />
      <LineId Id="1379" Count="1" />
      <LineId Id="1226" Count="13" />
      <LineId Id="1381" Count="0" />
      <LineId Id="1240" Count="11" />
      <LineId Id="1384" Count="0" />
      <LineId Id="1383" Count="0" />
      <LineId Id="1253" Count="2" />
      <LineId Id="1385" Count="1" />
      <LineId Id="1256" Count="3" />
      <LineId Id="1387" Count="0" />
      <LineId Id="1260" Count="0" />
      <LineId Id="1388" Count="0" />
      <LineId Id="1264" Count="3" />
      <LineId Id="1390" Count="0" />
      <LineId Id="1389" Count="0" />
      <LineId Id="1399" Count="1" />
      <LineId Id="1403" Count="0" />
      <LineId Id="1401" Count="0" />
      <LineId Id="1269" Count="0" />
      <LineId Id="1393" Count="0" />
      <LineId Id="1392" Count="0" />
      <LineId Id="1271" Count="12" />
      <LineId Id="1133" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>