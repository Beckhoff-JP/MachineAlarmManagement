<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{2bbb03aa-d457-41dc-adf0-3baf372f675a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR

	(* Alarm control *)	
	// Alarm calculation function block
	alarm_calculator    : FB_AlarmCalculator;	
	// each alarm instances
	fbTestAlarm1     : FB_Alarm(TC_Events.UserEventClass.test_alarm1, alarm_calculator);
	fbTestAlarm2     : FB_Alarm(TC_Events.UserEventClass.test_alarm2, alarm_calculator);

	(* For IoT *)
	// Cycle record data
	fbInfluxDBRecorder	:RecordInfluxDB(DBID := GVL.TARGET_DBID);
	alarm_db_listener		: FB_AlarmDBListener(fbInfluxDBRecorder);
	simple_listener			: FB_AlarmSimpleListener;

	(*User variables*)
	// User alarm event
	error_condition					: BOOL;
	confirm_button_input		: BOOL;
	reset_button_input			: BOOL;
	is_error					: BOOL;
	is_unconfirm				: BOOL;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Database driver by TF6420
fbInfluxDBRecorder();

// Initialize alarm event calculatror and IoT service
alarm_db_listener.machine_name := 'Machine-1';
alarm_calculator.add_listener(alarm_db_listener);
alarm_calculator.add_listener(simple_listener);

fbTestAlarm1(
	bEvt := error_condition, // Activate event by alarm condition.
	module_name := 'General', //module_name
	bLatch := FALSE,   // Event will be stay active state after "bEvt" is fall down.
	bConfirm := confirm_button_input, // Confirmation operation.
	bReset := reset_button_input // Reset operation.
);

fbTestAlarm2(
	bEvt := error_condition, // Activate event by alarm condition.
	module_name := 'Loading module', //module_name
	bLatch := FALSE,   // Event will be stay active state after "bEvt" is fall down.
	bConfirm := confirm_button_input, // Confirmation operation.
	bReset := reset_button_input // Reset operation.
);

// Set arguments if event item is required argument
fbTestAlarm2.ipArguments.Clear().AddString('code').AddInt(1);

// Alarm calculator
alarm_calculator();
is_error := alarm_calculator.is_raised(severity := TcEventSeverity.Warning); // Check active event which the severity more than 'Warning' level.
is_unconfirm := alarm_calculator.is_unconfirmed(severity := TcEventSeverity.Warning); // Check confirmed event which the severity more than 'Warning' level.
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="264" Count="5" />
      <LineId Id="295" Count="0" />
      <LineId Id="270" Count="23" />
      <LineId Id="37" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>