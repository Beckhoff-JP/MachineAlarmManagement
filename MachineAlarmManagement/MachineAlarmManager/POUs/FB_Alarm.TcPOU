<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_Alarm" Id="{fd59e4a9-d269-4936-83d6-88a7cff9a7f1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Alarm EXTENDS FB_TcAlarm
VAR_INPUT
	set_activate	: BOOL;				// Set true during something event occured.
	set_confirm		: BOOL;				// True momentally after operator confirming event.
	set_clear		: BOOL := FALSE;	// When the bLatch flag is True and bEvt is False, this flag can be unlatch when raised. 
	module_name 	:STRING;			// module name where event occured.
	nLangId			: DINT := 1033;		// Language code
END_VAR
VAR
	set_activate_mem	: BOOL;				// Set true during something event occured.	
	_with_reset_operation : BOOL;
END_VAR
VAR PERSISTENT
	_sequence_number	: ULINT;	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF set_activate  
	AND NOT SUPER^.bRaised AND
	SUPER^.eConfirmationState <> TcEventConfirmationState.WaitForConfirmation THEN
	SUPER^.Raise(0);
	SUPER^.ipArguments.Clear();
END_IF

IF set_confirm THEN
	SUPER^.Confirm(0);
END_IF


//IF SUPER^.eConfirmationState = TcEventConfirmationState.NotSupported THEN
IF NOT _with_reset_operation THEN
	IF set_activate_mem AND NOT set_activate THEN
		SUPER^.Clear(0, TRUE);
	END_IF
ELSE
	IF NOT set_activate 
		AND set_clear THEN
		SUPER^.Clear(0, TRUE);
	END_IF
END_IF

set_activate_mem	:= set_activate;
set_clear := FALSE;
set_confirm := FALSE;]]></ST>
    </Implementation>
    <Method Name="add_arguments" Id="{69685192-0445-4c2c-97ed-e964df70a1ba}">
      <Declaration><![CDATA[METHOD add_arguments : BOOL
VAR_INPUT
	argument_value : T_Arg;
END_VAR
VAR
	_temp : primitives;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[add_arguments := TRUE;
CASE argument_value.eType OF
    E_ArgType.ARGTYPE_BYTE:
		MEMCPY(ADR(_temp.ARGTYPE_BYTE), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddByte(_temp.ARGTYPE_BYTE);
    E_ArgType.ARGTYPE_WORD:
		MEMCPY(ADR(_temp.ARGTYPE_WORD), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddWord(_temp.ARGTYPE_WORD);
    E_ArgType.ARGTYPE_DWORD:
		MEMCPY(ADR(_temp.ARGTYPE_DWORD), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddDWord(_temp.ARGTYPE_DWORD);
    E_ArgType.ARGTYPE_REAL:
		MEMCPY(ADR(_temp.ARGTYPE_REAL), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddReal(_temp.ARGTYPE_REAL);
    E_ArgType.ARGTYPE_LREAL:
		MEMCPY(ADR(_temp.ARGTYPE_LREAL), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddLreal(_temp.ARGTYPE_LREAL);
    E_ArgType.ARGTYPE_SINT:
		MEMCPY(ADR(_temp.ARGTYPE_SINT), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddSint(_temp.ARGTYPE_SINT);
    E_ArgType.ARGTYPE_INT:
		MEMCPY(ADR(_temp.ARGTYPE_INT), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddInt(_temp.ARGTYPE_INT);
    E_ArgType.ARGTYPE_DINT:
		MEMCPY(ADR(_temp.ARGTYPE_DINT), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddDint(_temp.ARGTYPE_DINT);
    E_ArgType.ARGTYPE_USINT:
		MEMCPY(ADR(_temp.ARGTYPE_USINT), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddUsint(_temp.ARGTYPE_USINT);
    E_ArgType.ARGTYPE_UINT:
		MEMCPY(ADR(_temp.ARGTYPE_UINT), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddUint(_temp.ARGTYPE_UINT);
    E_ArgType.ARGTYPE_UDINT:
		MEMCPY(ADR(_temp.ARGTYPE_UDINT), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddUdint(_temp.ARGTYPE_UDINT);
    E_ArgType.ARGTYPE_STRING:
		MEMCPY(ADR(_temp.ARGTYPE_STRING), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddString(_temp.ARGTYPE_STRING);
    E_ArgType.ARGTYPE_BOOL:
		MEMCPY(ADR(_temp.ARGTYPE_BOOL), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddBool(_temp.ARGTYPE_BOOL);
    E_ArgType.ARGTYPE_ULARGE:
		MEMCPY(ADR(_temp.ARGTYPE_ULARGE), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddULInt(_temp.ARGTYPE_ULARGE);
    E_ArgType.ARGTYPE_LARGE:
		MEMCPY(ADR(_temp.ARGTYPE_LARGE), argument_value.pData, argument_value.cbLen);
		SUPER^.ipArguments.AddLint(_temp.ARGTYPE_LARGE);
	ELSE
		add_arguments := FALSE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="bWithResetOperation" Id="{93409fb2-b009-453f-9e05-096003b97aff}">
      <Declaration><![CDATA[PROPERTY bWithResetOperation : BOOL]]></Declaration>
      <Get Name="Get" Id="{6866ae2a-f7a5-4ca0-b3b7-125471affd74}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bWithResetOperation := _with_reset_operation;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{78fb1828-c423-4ff0-b6d3-caf1c6533b25}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_with_reset_operation := bWithResetOperation;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_Alarm">
      <LineId Id="1275" Count="2" />
      <LineId Id="1279" Count="2" />
      <LineId Id="1286" Count="6" />
      <LineId Id="1392" Count="0" />
      <LineId Id="1293" Count="8" />
      <LineId Id="1020" Count="0" />
      <LineId Id="1349" Count="0" />
      <LineId Id="1351" Count="0" />
      <LineId Id="1369" Count="0" />
    </LineIds>
    <LineIds Name="FB_Alarm.add_arguments">
      <LineId Id="67" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Alarm.bWithResetOperation.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Alarm.bWithResetOperation.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>