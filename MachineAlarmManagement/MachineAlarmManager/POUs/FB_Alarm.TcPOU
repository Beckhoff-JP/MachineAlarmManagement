<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Alarm" Id="{fd59e4a9-d269-4936-83d6-88a7cff9a7f1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Alarm EXTENDS FB_TcAlarm
VAR_INPUT
	bEvt		: BOOL;				// Set true during something event occured.
	module_name :STRING;			// module name where event occured.
	bConfirm	: BOOL;				// True momentally after operator confirming event.
	bLatch		: BOOL := FALSE;	// Keep alarm status raised after bEvt being FALSE.
	bReset		: BOOL := FALSE;	// When the bLatch flag is True and bEvt is False, this flag can be unlatch when raised. 
	language_id		:DINT := 1033;	// Language ID for alarm text
END_VAR
VAR_OUTPUT
	event_raised	:BOOL;			// Set true during alarm event is activated
	event_cleared	:BOOL;			// Set true at 1 cycle when event would be deactivated.
	event_confirmed	:BOOL;			// Set true at 1 cycle when event would be confirmed.
END_VAR
VAR
	exist_wait_for_confirmation :BOOL;
	bMemConfirmEvent :BOOL;
	bMemEvt: BOOL;
	bMemReset: BOOL;
	bMemActive: BOOL;
	{attribute 'TcEncoding' := 'UTF-8'}
	_alarm_text : STRING;
	pLangId	: DINT;
	_last_raise_time : ULINT;
	_last_reset_time : ULINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF pLangId <> language_id THEN
	_alarm_text := '';
END_IF

IF _alarm_text = '' THEN
	get_alarm_text(language_id);
END_IF

pLangId := language_id;

IF bEvt 
	AND NOT bMemEvt 
	AND SUPER^.eConfirmationState <> TcEventConfirmationState.WaitForConfirmation THEN
	event_raised := TRUE;
	SUPER^.Raise(0);
ELSE
	event_raised := FALSE;
END_IF

IF event_raised THEN
	_last_raise_time := F_GetSystemTime();
END_IF


IF bConfirm THEN
	SUPER^.Confirm(0);
END_IF

exist_wait_for_confirmation := SUPER^.eConfirmationState = TcEventConfirmationState.WaitForConfirmation;
event_confirmed := NOT exist_wait_for_confirmation AND bMemConfirmEvent;

IF bLatch THEN
	IF NOT bEvt 
		AND bReset 
		AND NOT bMemReset 
		AND NOT exist_wait_for_confirmation THEN
		SUPER^.Clear(0, TRUE);
	END_IF
ELSE
	IF bMemEvt AND NOT bEvt THEN
		SUPER^.Clear(0, TRUE);
	END_IF
END_IF

bMemEvt := bEvt;
bMemReset := bReset;
bMemConfirmEvent := exist_wait_for_confirmation;
event_cleared := NOT SUPER^.bActive AND bMemActive;
bMemActive := SUPER^.bActive;

IF event_cleared THEN
	_last_reset_time := F_GetSystemTime();
END_IF
]]></ST>
    </Implementation>
    <Property Name="alarm_text" Id="{2d576994-e408-408b-b516-5d1698089ace}">
      <Declaration><![CDATA[{attribute 'TcEncoding' := 'UTF-8'}
PROPERTY alarm_text : STRING]]></Declaration>
      <Get Name="Get" Id="{21f2c630-8937-49b7-b40a-e033b227cc84}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[alarm_text := _alarm_text;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{dabcb318-47a7-4cd8-bc7f-b45edc1cf196}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	evtEntry	: TcEventEntry; // Specify event class and entry name
	p_calculator : REFERENCE TO FB_AlarmCalculator; // Specify pointer to FB_AlarmCalculator.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[p_calculator.reg_alarm(p_alarm := THIS);
SUPER^.CreateEx(evtEntry, TRUE, 0);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="get_alarm_text" Id="{5abff93c-6a62-4cad-aefd-c22f58a80c9b}">
      <Declaration><![CDATA[METHOD get_alarm_text : BOOL
VAR_INPUT
	nLangId	:	DINT  := 1033;// Language code
END_VAR
VAR
	_text	:STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[language_id := nLangId;
IF get_alarm_text := THIS^.RequestEventText(nLangId := language_id, sResult := _text, nResultSize := SIZEOF(_text)) THEN
	UTF8_TO_STRING(ADR(_alarm_text), ADR(_text), SIZEOF(_text));
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="last_raise_time" Id="{c92c6216-dcb6-4222-8b82-f4b628a09b1e}">
      <Declaration><![CDATA[PROPERTY last_raise_time : ULINT]]></Declaration>
      <Get Name="Get" Id="{81f7ec9d-644f-44d0-be24-493ce9c7e278}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[last_raise_time := _last_raise_time;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="last_reset_time" Id="{c7547f0f-b902-4ee5-bff2-0d368a41b110}">
      <Declaration><![CDATA[PROPERTY last_reset_time : ULINT]]></Declaration>
      <Get Name="Get" Id="{63854fd2-5b71-4c5c-98c1-738319711fde}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[last_reset_time := _last_reset_time;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_Alarm">
      <LineId Id="419" Count="46" />
      <LineId Id="467" Count="0" />
      <LineId Id="469" Count="4" />
      <LineId Id="366" Count="0" />
    </LineIds>
    <LineIds Name="FB_Alarm.alarm_text.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Alarm.FB_init">
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Alarm.get_alarm_text">
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Alarm.last_raise_time.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Alarm.last_reset_time.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>